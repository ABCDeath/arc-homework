// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	command "arc-homework/space-game/command"
	error_handler "arc-homework/space-game/error_handler"

	mock "github.com/stretchr/testify/mock"

	reflect "reflect"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// Handle provides a mock function with given fields: _a0, err
func (_m *Handler) Handle(_a0 command.Command, err error) error {
	ret := _m.Called(_a0, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(command.Command, error) error); ok {
		r0 = rf(_a0, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterDefaultCmdHandler provides a mock function with given fields: commandType, handler
func (_m *Handler) RegisterDefaultCmdHandler(commandType reflect.Type, handler error_handler.Handle) {
	_m.Called(commandType, handler)
}

// RegisterDefaultHandler provides a mock function with given fields: handler
func (_m *Handler) RegisterDefaultHandler(handler error_handler.Handle) {
	_m.Called(handler)
}

// RegisterHandler provides a mock function with given fields: commandType, err, handler
func (_m *Handler) RegisterHandler(commandType reflect.Type, err error, handler error_handler.Handle) {
	_m.Called(commandType, err, handler)
}

type mockConstructorTestingTNewHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHandler(t mockConstructorTestingTNewHandler) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
