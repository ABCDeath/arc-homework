// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	vector "arc-homework/space-game/moving/vector"
)

// Movable is an autogenerated mock type for the Movable type
type Movable struct {
	mock.Mock
}

// GetPosition provides a mock function with given fields:
func (_m *Movable) GetPosition() (vector.Vector, error) {
	ret := _m.Called()

	var r0 vector.Vector
	if rf, ok := ret.Get(0).(func() vector.Vector); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(vector.Vector)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVelocity provides a mock function with given fields:
func (_m *Movable) GetVelocity() (vector.Vector, error) {
	ret := _m.Called()

	var r0 vector.Vector
	if rf, ok := ret.Get(0).(func() vector.Vector); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(vector.Vector)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPosition provides a mock function with given fields: v
func (_m *Movable) SetPosition(v vector.Vector) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(vector.Vector) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetVelocity provides a mock function with given fields: v
func (_m *Movable) SetVelocity(v vector.Vector) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(vector.Vector) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMovable interface {
	mock.TestingT
	Cleanup(func())
}

// NewMovable creates a new instance of Movable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMovable(t mockConstructorTestingTNewMovable) *Movable {
	mock := &Movable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
