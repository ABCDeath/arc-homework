// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Object is an autogenerated mock type for the Object type
type Object struct {
	mock.Mock
}

// GetProperty provides a mock function with given fields: name
func (_m *Object) GetProperty(name string) (interface{}, error) {
	ret := _m.Called(name)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetProperty provides a mock function with given fields: name, value
func (_m *Object) SetProperty(name string, value interface{}) error {
	ret := _m.Called(name, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(name, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewObject interface {
	mock.TestingT
	Cleanup(func())
}

// NewObject creates a new instance of Object. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewObject(t mockConstructorTestingTNewObject) *Object {
	mock := &Object{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
