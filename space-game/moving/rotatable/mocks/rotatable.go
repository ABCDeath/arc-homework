// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Rotatable is an autogenerated mock type for the Rotatable type
type Rotatable struct {
	mock.Mock
}

// GetAngle provides a mock function with given fields:
func (_m *Rotatable) GetAngle() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAngularVelocity provides a mock function with given fields:
func (_m *Rotatable) GetAngularVelocity() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAngle provides a mock function with given fields: v
func (_m *Rotatable) SetAngle(v int) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAngularVelocity provides a mock function with given fields: v
func (_m *Rotatable) SetAngularVelocity(v int) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRotatable interface {
	mock.TestingT
	Cleanup(func())
}

// NewRotatable creates a new instance of Rotatable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRotatable(t mockConstructorTestingTNewRotatable) *Rotatable {
	mock := &Rotatable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
